From 4bf8ec9f1ac59ff85f00189f87fc74d67d79caa4 Mon Sep 17 00:00:00 2001
From: Marius-Cristian Baciu <2309bmcristi@gmail.com>
Date: Sun, 19 Jul 2020 02:52:02 +0300
Subject: [PATCH] Add builtin symbols definitions

Signed-off-by: Marius-Cristian Baciu <2309bmcristi@gmail.com>
---
 libphobos/libdruntime/core/atomic.d  |  8 ++++----
 libphobos/libdruntime/gcc/builtins.d | 24 ++++++++++++++++++++++++
 2 files changed, 28 insertions(+), 4 deletions(-)

diff --git a/libphobos/libdruntime/core/atomic.d b/libphobos/libdruntime/core/atomic.d
index 544fc1e6a..bcbfd85e9 100644
--- a/libphobos/libdruntime/core/atomic.d
+++ b/libphobos/libdruntime/core/atomic.d
@@ -1374,8 +1374,8 @@ else version (GNU)
             }
             else static if (T.sizeof == long.sizeof && GNU_Have_64Bit_Atomics)
             {
-                res = __atomic_compare_exchange_8(here, cast(void*) &ifThis, *cast(ulong*) &writeThis,
-                                                  false, MemoryOrder.seq, MemoryOrder.seq);
+                res = __atomic_compare_exchange(T.sizeof, cast(void *)here, cast(void*)&ifThis,
+                        cast(void *) &writeThis, MemoryOrder.seq, MemoryOrder.seq);
             }
             else static if (GNU_Have_LibAtomic)
             {
@@ -1458,7 +1458,7 @@ else version (GNU)
             else static if (GNU_Have_LibAtomic)
             {
                 T value;
-                __atomic_load(T.sizeof, &val, cast(void*)&value, ms);
+                __atomic_load(T.sizeof, cast(void *)&val, cast(void*)&value, ms);
                 return *cast(HeadUnshared!T*) &value;
             }
             else
@@ -1499,7 +1499,7 @@ else version (GNU)
             }
             else static if (GNU_Have_LibAtomic)
             {
-                __atomic_store(T.sizeof, &val, cast(void*)&newval, ms);
+                __atomic_store(T.sizeof, cast(void *)&val, cast(void*)&newval, ms);
             }
             else
                 static assert(0, "Invalid template type specified.");
diff --git a/libphobos/libdruntime/gcc/builtins.d b/libphobos/libdruntime/gcc/builtins.d
index 0cacf7afc..ce1a6cb24 100644
--- a/libphobos/libdruntime/gcc/builtins.d
+++ b/libphobos/libdruntime/gcc/builtins.d
@@ -42,3 +42,27 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  */
 
 module gcc.builtins;
+
+public alias __builtin_clonglong  = long;
+public alias __builtin_culonglong = ulong;
+
+extern (C) void __atomic_store_c(int size, void *dest, void *src, int model) pure nothrow @nogc;
+
+void __atomic_store(int size, void *dest, void *src, int model) pure nothrow @nogc {
+    __atomic_store_c(size, dest, src, model);
+}
+
+extern (C) int __atomic_compare_exchange_c(int size, void *dest, void *src, void *desired,
+                        int success, int failure) pure nothrow @nogc;
+
+bool __atomic_compare_exchange(int size, void *dest, void *src, void *desired,
+                        int success, int failure) pure nothrow @nogc {
+    return cast(bool)__atomic_compare_exchange_c(size, dest, src, desired, success, failure);
+}
+
+extern (C) void __atomic_load_c(int size, void *dest, void *src, int model) pure nothrow @nogc @trusted;
+
+void __atomic_load(int size, void *dest, void *src, int model) pure nothrow @nogc {
+    __atomic_load_c(size, dest, src, model);
+}
+
-- 
2.17.1

